<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Tricks extends \App\Entity\Tricks implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'userId', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'descritpion', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'pictures', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'videos', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'modifiedAt', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'commentarys'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'userId', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'descritpion', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'pictures', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'videos', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'modifiedAt', '' . "\0" . 'App\\Entity\\Tricks' . "\0" . 'commentarys'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Tricks $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId(): ?\App\Entity\users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', []);

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserId(?\App\Entity\users $userId): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', [$userId]);

        return parent::setUserId($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescritpion(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescritpion', []);

        return parent::getDescritpion();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescritpion(string $descritpion): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescritpion', [$descritpion]);

        return parent::setDescritpion($descritpion);
    }

    /**
     * {@inheritDoc}
     */
    public function getPictures(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPictures', []);

        return parent::getPictures();
    }

    /**
     * {@inheritDoc}
     */
    public function setPictures(?string $pictures): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPictures', [$pictures]);

        return parent::setPictures($pictures);
    }

    /**
     * {@inheritDoc}
     */
    public function getVideos(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVideos', []);

        return parent::getVideos();
    }

    /**
     * {@inheritDoc}
     */
    public function setVideos(?string $videos): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVideos', [$videos]);

        return parent::setVideos($videos);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeImmutable
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTimeImmutable $createdAt): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedAt(): ?\DateTimeImmutable
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedAt', []);

        return parent::getModifiedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedAt(?\DateTimeImmutable $modifiedAt): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedAt', [$modifiedAt]);

        return parent::setModifiedAt($modifiedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentarys(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentarys', []);

        return parent::getCommentarys();
    }

    /**
     * {@inheritDoc}
     */
    public function addCommentary(\App\Entity\Commentarys $commentary): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCommentary', [$commentary]);

        return parent::addCommentary($commentary);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCommentary(\App\Entity\Commentarys $commentary): \App\Entity\Tricks
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCommentary', [$commentary]);

        return parent::removeCommentary($commentary);
    }

}
